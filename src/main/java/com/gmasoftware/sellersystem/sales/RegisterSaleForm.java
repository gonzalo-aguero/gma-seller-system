/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.gmasoftware.sellersystem.sales;

import com.gmasoftware.sellersystem.database.DB;
import com.gmasoftware.sellersystem.user.User;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author GMA Software
 */
public class RegisterSaleForm extends javax.swing.JFrame{
    private final User user;
    private ProductBlock[] productBlocks = {};
    private final com.gmasoftware.sellersystem.sales.SalesView salesView;
    
    private JLabel total;
    
    /**
     * Creates new form RegisterNewSale
     * @param salesView
     */
    public RegisterSaleForm(com.gmasoftware.sellersystem.sales.SalesView salesView) {
        this.salesView = salesView;
        user = User.getInstance();
        
        com.gmasoftware.sellersystem.theme.Icons.setDefaultFrameIcon(this);
        
        initComponents();
        this.setLocationRelativeTo(null);
        
        productListContainerFactory();
        addAProductBlock();
        
        actionBarFactory();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        submitButton = new javax.swing.JButton();
        productListContainer = new javax.swing.JScrollPane();
        productBlocksContainer = new javax.swing.JPanel();
        actionBar = new javax.swing.JPanel();

        jLabel3.setText("jLabel3");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel6.setText("jLabel6");

        setTitle("Register New Sale");
        setMaximumSize(new java.awt.Dimension(615, 2147483647));
        setMinimumSize(new java.awt.Dimension(615, 0));

        jLabel1.setFont(new java.awt.Font("Ubuntu Light", 1, 22)); // NOI18N
        jLabel1.setText("REGISTER NEW SALE");

        submitButton.setText("ACCEPT");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        productListContainer.setMaximumSize(new java.awt.Dimension(615, 350));
        productListContainer.setMinimumSize(new java.awt.Dimension(615, 350));
        productListContainer.setPreferredSize(new java.awt.Dimension(615, 350));

        productBlocksContainer.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        productBlocksContainer.setMaximumSize(new java.awt.Dimension(605, 999999999));
        productBlocksContainer.setMinimumSize(new java.awt.Dimension(605, 350));

        javax.swing.GroupLayout productBlocksContainerLayout = new javax.swing.GroupLayout(productBlocksContainer);
        productBlocksContainer.setLayout(productBlocksContainerLayout);
        productBlocksContainerLayout.setHorizontalGroup(
            productBlocksContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 601, Short.MAX_VALUE)
        );
        productBlocksContainerLayout.setVerticalGroup(
            productBlocksContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 99999995, 99999995)
        );

        productListContainer.setViewportView(productBlocksContainer);

        actionBar.setMaximumSize(new java.awt.Dimension(611, 50));
        actionBar.setMinimumSize(new java.awt.Dimension(611, 50));
        actionBar.setPreferredSize(new java.awt.Dimension(611, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(productListContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(actionBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(215, 215, 215)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productListContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actionBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Here will be the product blocks with their name, price, units and subtotal.
     */
    private void productListContainerFactory(){
        productBlocksContainer.setBackground(new java.awt.Color(205, 205, 205));
        productBlocksContainer.setLocation(0,0);
        var productBlocksContainerLayout = new BoxLayout(productBlocksContainer, BoxLayout.Y_AXIS);
        productBlocksContainer.setLayout(productBlocksContainerLayout);
        
        productListContainer.setLocation(0,0);
        productListContainer.setSize(605, 350);
        productListContainer.setViewportView(productBlocksContainer);
    }

    /**
     * Place a new product block on the form. 
     * For each different product there will be one of these blocks with the name 
     * of the product, its price, units and subtotal.
     */
    private void addAProductBlock(){
        var productBlock = new ProductBlock(this);
        
        // Events for Enter and Ctrl + Enter.
        productBlock.getProductUnits().addKeyListener(new KeyListener(){
            @Override
            public void keyTyped(KeyEvent e){}
            @Override
            public void keyPressed(KeyEvent e){
                // Enter
                if(e.getKeyCode() == KeyEvent.VK_ENTER){
                    productBlock.calculateSubtotal();
                    System.out.println("Indice: "+ productBlock.getIndexInContainer());
                }
                // Ctrl + Enter
                if(e.isControlDown() && e.getKeyCode() == KeyEvent.VK_ENTER){
                    addAProductBlock();
                }
            }
            @Override
            public void keyReleased(KeyEvent e){}
        });
        
        productBlocksContainer.add(productBlock);//add the productBlock to the container
        
        var productBlocksLength = productBlocks.length;
        //It's the product blocks array with a new place for the new product block.
        ProductBlock[] newArray = new ProductBlock[productBlocksLength +1];
        
        //Copy all the elements from the old array to the new array.
        System.arraycopy(productBlocks, 0, newArray, 0, productBlocksLength);
        
        //Add the new element (the new product block)
        productBlock.setIndexInContainer(productBlocksLength);
        newArray[productBlocksLength] = productBlock;
        
        productBlocks = newArray;
        
        //Event to remove the product block.
        productBlock.getRemoveButton().addActionListener((ActionEvent ActionListener) -> {
            var oldProductBlocksLength = productBlocks.length;
            
            //It's the new array of product blocks with one less place.
            var newArraySize = (oldProductBlocksLength -1) > 0 ? (oldProductBlocksLength -1) : 0;
            
            ProductBlock[] newArray1 = new ProductBlock[newArraySize];
            int indexCounter = 0;
            
            for (int i = 0; i < oldProductBlocksLength; i++) {
                // Copy all items ignoring the one you want to delete
                if (i != productBlock.getIndexInContainer()) {
                    //&& newArray.length > 0){
                    var pb = productBlocks[i];
                    newArray1[indexCounter] = pb;
                    indexCounter++;
                }
            }
            
            productBlocksContainer.remove(productBlock.getIndexInContainer());//Remove the product block
            productBlocks = newArray1;
            
            // Update the indexs of the product blocks.
            for (int i = 0; i < productBlocks.length; i++) {
                var pb = productBlocks[i];
                pb.setIndexInContainer(i);
            }

            productBlocksContainer.repaint();
            calculateTotal();
        });
    }
    
    private void actionBarFactory(){
        JButton addProductButton = new JButton();
        addProductButton.setText("Añadir producto");
        addProductButton.addActionListener((ActionEvent arg0) -> {            
            addAProductBlock();
        });
        
        JLabel totalTitle = new JLabel();
        totalTitle.setFont(new java.awt.Font("Ubuntu Light", 1, 20));
        totalTitle.setText("TOTAL");
        
        total = new JLabel();
        total.setFont(new java.awt.Font("Ubuntu", 1, 28));
        total.setText("0");
        
        JPanel totalContainer = new JPanel();
        totalContainer.add(totalTitle);
        totalContainer.add(total);
        
        actionBar.add(addProductButton);
        actionBar.add(totalContainer);
    }
    
    protected float calculateTotal(){
        float total = 0;
        var productBlocksLength = productBlocks.length;
        for (int i = 0; i < productBlocksLength; i++) {
            var pb = productBlocks[i];
            var subtotal = pb.getCalculatedSubtotal();
            total += subtotal;
        }
        this.total.setText(String.valueOf(total));
        return total;
    };
    
    /***
     * Register a new sale.
     * @param evt Event object
     */
    private void submitButtonHandler(java.awt.event.ActionEvent evt0){
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        var now = dtf.format(LocalDateTime.now());
        String productIDs = "";
        String units = "";
        int productsCount = 0;
        
        //Prepare the String with product IDs and the String with product subtotals.
        for (int i = 0; i < productBlocks.length; i++) {
            String currentProductUnits = productBlocks[i].getProductUnits().getText();
            
            if(i == (productBlocks.length - 1)){
                //if the current element is the last one.
                productIDs += productBlocks[i].getSelectedProduct().getId();
                units += currentProductUnits;
            }else{
                productIDs += productBlocks[i].getSelectedProduct().getId() + ",";
                units += currentProductUnits + ",";
            }
            
            productsCount += Integer.parseInt(currentProductUnits);
        }
        
        var db = DB.getInstance();
        var newID = db.calculateID("sales", db.HIGHEST_VALUE);
        db.connect();
        
        String[] keys = {"id", "totalAmount","totalProductCount","date","productList","productUnits","user"};
        String[] valuesToInsert = {
            newID,
            String.valueOf(calculateTotal()),
            String.valueOf(productsCount),
            String.valueOf(now),
            productIDs,
            units,
            user.getUsername()
        };
        
        //Register the sale in the database.
        db.insert("sales", keys, valuesToInsert);
        
        // If the sale is registered successfully
        
        // Remove the product stock after the sale.
        for (ProductBlock productBlock : productBlocks) {
            var product = productBlock.getSelectedProduct();
            String soldUnits = productBlock.getProductUnits().getText(); 
            product.removeProductStockAfterSale(Integer.parseInt(soldUnits));
        }
        
        this.setVisible(false);
        
        if(salesView != null){
            salesView.reloadTable();
        }
    }
    
    
    
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
      submitButtonHandler(evt);
    }//GEN-LAST:event_submitButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegisterSaleForm(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionBar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel productBlocksContainer;
    private javax.swing.JScrollPane productListContainer;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}
